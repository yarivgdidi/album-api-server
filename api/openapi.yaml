openapi: 3.0.2
info:
  contact:
    email: apiteam@swagger.io
    name: Swagger API Team
    url: http://swagger.io
  description: Well B home exercise  OpenAPI 3.0 specification
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Open Api album example
  version: 1.0.0
servers:
- url: http://localhost:3000/api
paths:
  /album:
    get:
      description: List all albums with user access
      operationId: listAlbums
      parameters:
      - description: maximum number of results to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: offset from beginning of list (for pagination)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Album'
                type: array
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        "204":
          description: No Content
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-eov-operation-handler: controllers/DefaultController
    post:
      description: Creates a new Album in the store
      operationId: addAlbum
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAlbum'
        description: Albums to add to the store
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: Successful operation
        "405":
          description: Invalid input
      x-eov-operation-handler: controllers/DefaultController
  /album/{id}:
    delete:
      description: deletes a single album based on the ID supplied
      operationId: deleteAlbum
      parameters:
      - description: ID of pet to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: pet deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-eov-operation-handler: controllers/DefaultController
    get:
      description: Returns an album based on a single ID,
      operationId: findAlbumById
      parameters:
      - description: ID of pet to fetch
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      x-eov-operation-handler: controllers/DefaultController
    put:
      operationId: updatePetWithForm
      parameters:
      - description: ID of album that needs to be updated
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        description: Albums to add to the store
        required: true
      responses:
        "204":
          description: No Content
        "405":
          description: Invalid input
      summary: Updates a album in the store with form data
      x-eov-operation-handler: controllers/DefaultController
components:
  schemas:
    Album:
      allOf:
      - $ref: '#/components/schemas/NewAlbum'
      - $ref: '#/components/schemas/Album_allOf'
    NewAlbum:
      example:
        _id: _id
        title: title
        userId: 0
      properties:
        userId:
          format: int64
          type: integer
        title:
          type: string
        _id:
          type: string
      required:
      - _id
      - title
      - userId
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    Album_allOf:
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
      type: object
